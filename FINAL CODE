//the right motor will be controlled by the motor A pins on the motor driver
const int AIN1 = 13;           //control pin 1 on the motor driver for the right motor
const int AIN2 = 12;            //control pin 2 on the motor driver for the right motor
const int PWMA = 11;            //speed control pin on the motor driver for the right motor
//the left motor will be controlled by the motor B pins on the motor driver
const int PWMB = 10;           //speed control pin on the motor driver for the left motor
const int BIN2 = 9;           //control pin 2 on the motor driver for the left motor
const int BIN1 = 8;           //control pin 1 on the motor driver for the left motor
int leftPin = A0; // analog input pin for left sensor
int rightPin = A1; // analog input pin for right sensor
int threshold = 850; // threshold value for line detection
int buzzerPin = 4; // digital output pin for buzzer
int ledPinLeft = 3; // digital output pin for left LED
int ledPinRight = 2; // digital output pin for right LED
//distance variables
const int trigPin = 6;
const int echoPin = 5;
int switchPin = 7;             //switch to turn the robot on and off
float distance = 0;            //variable to store the distance measured by the distance sensor
//robot behaviour variables
int forwardTime = 5;
int backupTime = 300;           //amount of time that the robot will back up when it senses an object
int turnTime = 400;             //amount that the robot will turn once it has backed up
#include <Wire.h>               //accelerometer library
#include <SparkFun_MMA8452Q.h>
MMA8452Q accel;
/********************************************************************************/
void setup()
{
  accel.init();
  pinMode(trigPin, OUTPUT);       //this pin will send ultrasonic pulses out from the distance sensor
  pinMode(echoPin, INPUT);        //this pin will sense when the pulses reflect back to the distance sensor
  pinMode(switchPin, INPUT_PULLUP);   //set this as a pullup to sense whether the switch is flipped
  //set the motor control pins as outputs
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(ledPinLeft, OUTPUT);
  pinMode(ledPinRight, OUTPUT);
  pinMode(leftPin, INPUT);
  pinMode(rightPin, INPUT);
  Serial.begin(9600);                   //begin serial communication with the computer
  Serial.print("I love engineering!");  //test the serial connection
}

/********************************************************************************/
void loop()
{
  distance = getDistance(); //distance sensor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" in");
            
  int leftVal = analogRead(leftPin); //IR sensors
  int rightVal = analogRead(rightPin);
  Serial.print("Left Sensor: ");
  Serial.println(leftVal);
  Serial.print("Right Sensor: ");
  Serial.println(rightVal);
  
  float xAccel = accel.getXAcceleration();
  float yAccel = accel.getYAcceleration();
  float zAccel = accel.getZAcceleration();
  Serial.println("X,Y,Z");
  Serial.print(xAccel,3);
  Serial.print(",");
  Serial.print(yAccel,3); 
  Serial.print(",");
  Serial.println(zAccel,3); 

  if (digitalRead(switchPin) == LOW) { //if the on switch is flipped
    if (distance < 10) {              //if an object is detected
      //back up and turn
      Serial.print(" ");
      Serial.print("BACK!");
      //stop for a moment
      rightMotor(0);
      leftMotor(0);
      tone(buzzerPin, 1000, 500);
      delay(100);
      //back up
      rightMotor(-75);
      leftMotor(-75);
      tone(buzzerPin, 1000, 500);
      
      delay(backupTime);
      //turn away from obstacle
         } else {                        //if no obstacle is detected drive forward
      Serial.print(" ");
      Serial.print("Moving..."); {

         if (leftVal < threshold && rightVal < threshold) {
    // both sensors are on the line, go straight
      rightMotor(75);
      leftMotor(75);
      digitalWrite(ledPinLeft, HIGH);
      digitalWrite(ledPinRight, HIGH);
  } else if (leftVal < threshold && rightVal >= threshold) {
    // left sensor is off the line, turn right
      rightMotor(-50);
      leftMotor(-50);
      digitalWrite(ledPinLeft, HIGH);
      digitalWrite(ledPinRight, HIGH);
      delay(backupTime);
      rightMotor(-100);
      leftMotor(0);
      digitalWrite(ledPinLeft, LOW);
      digitalWrite(ledPinRight, HIGH);
      delay(turnTime);
       } else if (leftVal >= threshold && rightVal < threshold) {
    // right sensor is off the line, turn left
      rightMotor(-50);
      leftMotor(-50);
      digitalWrite(ledPinLeft, HIGH);
      digitalWrite(ledPinRight, HIGH);
      delay(backupTime);
      rightMotor(0);
      leftMotor(-100);
      digitalWrite(ledPinLeft, HIGH);
      digitalWrite(ledPinRight, LOW);
      delay(turnTime);
     
  } else {
    // both sensors are off the line, stop the motors and play a tone on the buzzer
      rightMotor(-50);
      leftMotor(-50);
      digitalWrite(ledPinLeft, LOW);
      digitalWrite(ledPinRight, LOW);
      delay(backupTime); 
  }
      }
        rightMotor(100);
        leftMotor(100);
      digitalWrite(ledPinLeft, HIGH);
      digitalWrite(ledPinRight, HIGH);
    }
  } else {                        //if the switch is off then stop the motors
    rightMotor(0);
    leftMotor(0);
  }
  delay(50);
 }

/********************************************************************************/
void rightMotor(int motorSpeed)                       //function for driving the right motor
{
  if (motorSpeed > 0)                                 //if the motor should drive forward (positive speed)
  {
    digitalWrite(AIN1, HIGH);                         //set pin 1 to high
    digitalWrite(AIN2, LOW);                          //set pin 2 to low
  }
  else if (motorSpeed < 0)                            //if the motor should drive backward (negative speed)
  {
    digitalWrite(AIN1, LOW);                          //set pin 1 to low
    digitalWrite(AIN2, HIGH);                         //set pin 2 to high
  }
  else                                                //if the motor should stop
  {
    digitalWrite(AIN1, LOW);                          //set pin 1 to low
    digitalWrite(AIN2, LOW);                          //set pin 2 to low
  }
  analogWrite(PWMA, abs(motorSpeed));                 //now that the motor direction is set, drive it at the entered speed
}

/********************************************************************************/
void leftMotor(int motorSpeed)                        //function for driving the left motor
{
  if (motorSpeed > 0)                                 //if the motor should drive forward (positive speed)
  {
    digitalWrite(BIN1, HIGH);                         //set pin 1 to high
    digitalWrite(BIN2, LOW);                          //set pin 2 to low
  }
  else if (motorSpeed < 0)                            //if the motor should drive backward (negative speed)
  {
    digitalWrite(BIN1, LOW);                          //set pin 1 to low
    digitalWrite(BIN2, HIGH);                         //set pin 2 to high
  }
  else                                                //if the motor should stop
  {
    digitalWrite(BIN1, LOW);                          //set pin 1 to low
    digitalWrite(BIN2, LOW);                          //set pin 2 to low
  }
  analogWrite(PWMB, abs(motorSpeed));                 //now that the motor direction is set, drive it at the entered speed
}

/********************************************************************************/
//RETURNS THE DISTANCE MEASURED BY THE HC-SR04 DISTANCE SENSOR
float getDistance()
{
  float echoTime;                   //variable to store the time it takes for a ping to bounce off an object
  float calculatedDistance;         //variable to store the distance calculated from the echo time

  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  echoTime = pulseIn(echoPin, HIGH);      //use the pulsein command to see how long it takes for the pulse to bounce back to the sensor
  calculatedDistance = echoTime / 148.0;  //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound)
  return calculatedDistance;              //send back the distance that was calculated
}
